
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package graficadora;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisisSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisisSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisisSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisisSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\017\000\002\004\017" +
    "\000\002\004\021\000\002\004\021\000\002\004\017\000" +
    "\002\004\021\000\002\004\017\000\002\004\013\000\002" +
    "\004\017\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\007\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\024\004\013\027\004\030\015\031\017\032" +
    "\010\033\011\034\005\035\007\036\006\001\002\000\004" +
    "\005\205\001\002\000\004\005\167\001\002\000\004\005" +
    "\153\001\002\000\004\005\137\001\002\000\004\005\121" +
    "\001\002\000\004\005\105\001\002\000\026\002\ufffe\004" +
    "\013\027\004\030\015\031\017\032\010\033\011\034\005" +
    "\035\007\036\006\001\002\000\004\005\070\001\002\000" +
    "\004\002\000\001\002\000\004\005\054\001\002\000\004" +
    "\002\053\001\002\000\004\005\020\001\002\000\004\007" +
    "\021\001\002\000\004\010\022\001\002\000\004\007\023" +
    "\001\002\000\004\010\024\001\002\000\004\007\025\001" +
    "\002\000\004\010\026\001\002\000\004\007\027\001\002" +
    "\000\004\010\030\001\002\000\030\012\037\013\041\014" +
    "\032\015\044\016\043\017\036\020\042\021\040\022\034" +
    "\023\033\024\035\001\002\000\004\010\045\001\002\000" +
    "\006\006\ufff2\010\ufff2\001\002\000\006\006\uffec\010\uffec" +
    "\001\002\000\006\006\uffea\010\uffea\001\002\000\006\006" +
    "\uffeb\010\uffeb\001\002\000\006\006\uffef\010\uffef\001\002" +
    "\000\006\006\ufff4\010\ufff4\001\002\000\006\006\uffed\010" +
    "\uffed\001\002\000\006\006\ufff3\010\ufff3\001\002\000\006" +
    "\006\uffee\010\uffee\001\002\000\006\006\ufff0\010\ufff0\001" +
    "\002\000\006\006\ufff1\010\ufff1\001\002\000\006\025\046" +
    "\026\050\001\002\000\004\006\uffe9\001\002\000\004\006" +
    "\051\001\002\000\004\006\uffe8\001\002\000\004\011\052" +
    "\001\002\000\026\002\ufffa\004\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\001\002" +
    "\000\004\002\001\001\002\000\004\007\055\001\002\000" +
    "\004\010\056\001\002\000\004\007\057\001\002\000\004" +
    "\010\060\001\002\000\004\007\061\001\002\000\004\010" +
    "\062\001\002\000\004\007\063\001\002\000\004\010\064" +
    "\001\002\000\030\012\037\013\041\014\032\015\044\016" +
    "\043\017\036\020\042\021\040\022\034\023\033\024\035" +
    "\001\002\000\004\006\066\001\002\000\004\011\067\001" +
    "\002\000\026\002\ufffc\004\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\001\002\000" +
    "\004\007\071\001\002\000\004\010\072\001\002\000\004" +
    "\007\073\001\002\000\004\010\074\001\002\000\004\007" +
    "\075\001\002\000\004\010\076\001\002\000\030\012\037" +
    "\013\041\014\032\015\044\016\043\017\036\020\042\021" +
    "\040\022\034\023\033\024\035\001\002\000\004\010\100" +
    "\001\002\000\006\025\046\026\050\001\002\000\004\006" +
    "\102\001\002\000\004\011\103\001\002\000\026\002\ufffd" +
    "\004\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\001\002\000\004\002\uffff\001\002" +
    "\000\004\007\106\001\002\000\004\010\107\001\002\000" +
    "\004\007\110\001\002\000\004\010\111\001\002\000\004" +
    "\007\112\001\002\000\004\010\113\001\002\000\030\012" +
    "\037\013\041\014\032\015\044\016\043\017\036\020\042" +
    "\021\040\022\034\023\033\024\035\001\002\000\004\010" +
    "\115\001\002\000\006\025\046\026\050\001\002\000\004" +
    "\006\117\001\002\000\004\011\120\001\002\000\026\002" +
    "\ufff7\004\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\001\002\000\004\007\122\001" +
    "\002\000\004\010\135\001\002\000\004\010\124\001\002" +
    "\000\032\007\126\012\037\013\041\014\032\015\044\016" +
    "\043\017\036\020\042\021\040\022\034\023\033\024\035" +
    "\001\002\000\004\010\131\001\002\000\004\010\127\001" +
    "\002\000\004\007\130\001\002\000\004\010\uffe6\001\002" +
    "\000\006\025\046\026\050\001\002\000\004\006\133\001" +
    "\002\000\004\011\134\001\002\000\026\002\ufff6\004\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\001\002\000\004\007\136\001\002\000\004" +
    "\010\uffe7\001\002\000\004\007\140\001\002\000\004\010" +
    "\141\001\002\000\004\007\142\001\002\000\004\010\143" +
    "\001\002\000\004\007\144\001\002\000\004\010\145\001" +
    "\002\000\030\012\037\013\041\014\032\015\044\016\043" +
    "\017\036\020\042\021\040\022\034\023\033\024\035\001" +
    "\002\000\004\010\147\001\002\000\006\025\046\026\050" +
    "\001\002\000\004\006\151\001\002\000\004\011\152\001" +
    "\002\000\026\002\ufff9\004\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\001\002\000" +
    "\004\007\154\001\002\000\004\010\155\001\002\000\004" +
    "\007\156\001\002\000\004\010\157\001\002\000\004\007" +
    "\160\001\002\000\004\010\161\001\002\000\030\012\037" +
    "\013\041\014\032\015\044\016\043\017\036\020\042\021" +
    "\040\022\034\023\033\024\035\001\002\000\004\010\163" +
    "\001\002\000\006\025\046\026\050\001\002\000\004\006" +
    "\165\001\002\000\004\011\166\001\002\000\026\002\ufff5" +
    "\004\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\001\002\000\004\007\170\001\002" +
    "\000\004\010\171\001\002\000\004\007\172\001\002\000" +
    "\004\010\173\001\002\000\004\007\174\001\002\000\004" +
    "\010\175\001\002\000\004\007\176\001\002\000\004\010" +
    "\177\001\002\000\030\012\037\013\041\014\032\015\044" +
    "\016\043\017\036\020\042\021\040\022\034\023\033\024" +
    "\035\001\002\000\004\010\201\001\002\000\006\025\046" +
    "\026\050\001\002\000\004\006\203\001\002\000\004\011" +
    "\204\001\002\000\026\002\ufff8\004\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\001" +
    "\002\000\004\007\206\001\002\000\004\010\207\001\002" +
    "\000\004\007\210\001\002\000\004\010\211\001\002\000" +
    "\004\007\212\001\002\000\004\010\213\001\002\000\004" +
    "\007\214\001\002\000\004\010\215\001\002\000\030\012" +
    "\037\013\041\014\032\015\044\016\043\017\036\020\042" +
    "\021\040\022\034\023\033\024\035\001\002\000\004\010" +
    "\217\001\002\000\006\025\046\026\050\001\002\000\004" +
    "\006\221\001\002\000\004\011\222\001\002\000\026\002" +
    "\ufffb\004\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\010\002\015\003\013\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\103\004\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\076\001\001" +
    "\000\002\001\001\000\004\006\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\113\001\001\000\002\001\001\000\004\006\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\145\001" +
    "\001\000\002\001\001\000\004\006\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\161\001" +
    "\001\000\002\001\001\000\004\006\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\177\001\001\000\002\001\001" +
    "\000\004\006\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\215\001\001\000\002\001\001\000\004\006\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisisSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisisSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisisSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisisSintactico$actions {


    

  private final AnalisisSintactico parser;

  /** Constructor */
  CUP$AnalisisSintactico$actions(AnalisisSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action_part00000000(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisisSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalisisSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= I EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisisSintactico$parser.done_parsing();
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // I ::= L 
            {
              String RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("I",0, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= O L 
            {
              String RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= O 
            {
              String RESULT =null;

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // O ::= cuadrado parAbre entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Lado:" + l +", Color: "+c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int li = Integer.parseInt(l);
    Graficar.graficarCuadrado(xi,yi,li,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // O ::= linea parAbre entero coma entero coma entero coma entero coma C parCierra pcoma 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int y1left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int y1right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String y1 = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String y2 = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X1: " + x1 + ", Y1: " + y1 + ", X2: " + x2 + ", Y2: " + y2 + ", Color: " + c);
    int xi = Integer.parseInt(x1);
    int yi = Integer.parseInt(y1);
    int xi2 = Integer.parseInt(x2);
    int yi2 = Integer.parseInt(y2);
    Graficar.graficarLinea(xi,yi,xi2,yi2,c); 

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // O ::= rectangulo parAbre entero coma entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Base:" + b +", Altura:" + a +", Color: "+c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int bi = Integer.parseInt(b);
    int ai = Integer.parseInt(a);
    Graficar.graficarRectangulo(xi,yi,bi,ai,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // O ::= trianguloRectangulo parAbre entero coma entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Base:" + b +", Altura:" + a +", Color: "+c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int bi = Integer.parseInt(b);
    int ai = Integer.parseInt(a);
    Graficar.graficarTrianguloRectangulo(xi,yi,bi,ai,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // O ::= circulo parAbre entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Radio:" + r + ", Color: "+ c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int ri = Integer.parseInt(r);
    Graficar.graficarCirculo(xi,yi,ri,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // O ::= ovalo parAbre entero coma entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String ejex = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String ejey = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Ejex:" + ejex + ", Ejey:" + ejey + ", Color: "+ c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int jx = Integer.parseInt(ejex);
    int jy = Integer.parseInt(ejey);
    Graficar.graficarOvalo(xi,yi,jx,jy,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // O ::= estrella parAbre entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Porcentaje:" + p + ", Color: "+ c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int px = Integer.parseInt(p);
    Graficar.graficarEstrella(xi,yi,px,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // O ::= poligono parAbre N coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int coordenadasleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int coordenadasright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		int[] coordenadas = (int[])((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		

    StringBuilder puntos = new StringBuilder();
    puntos.append("Puntos: ");
    
    for (int i = 0; i < coordenadas.length; i++) {
        puntos.append(coordenadas[i]);
        if (i < coordenadas.length - 1) {
            puntos.append(", ");
        }
    }
    
    System.out.println(puntos.toString() + ", Color: " + c + ", Tipo: " + t);

    int [] xPuntos = new int[coordenadas.length /2];
    int [] yPuntos = new int[coordenadas.length /2];

    for  (int i = 0; i < coordenadas.length; i += 2){
        xPuntos[i / 2] = coordenadas[i];
        yPuntos[i / 2] = coordenadas[i + 1];
    }
    Graficar.graficarPoligono(xPuntos, yPuntos, xPuntos.length, c ,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // O ::= pacman parAbre entero coma entero coma entero coma C coma T parCierra pcoma 
            {
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-10)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		
    System.out.println("X: "+ x +", Y:" +y +", Porcentaje:" + p + ", Color: "+ c +", Tipo: "+ t);
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int px = Integer.parseInt(p);
    Graficar.graficarPacman(xi,yi,px,c,t);

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("O",2, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // C ::= rojo 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = r; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= azul 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= celeste 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= verde 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= negro 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= morado 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = m; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= anaranjado 
            {
              String RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String an = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = an; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= rosado 
            {
              String RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = ro; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= amarillo 
            {
              String RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = am; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= gris 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = g; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= cafe 
            {
              String RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String cf = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = cf; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T ::= rellena 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = r; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= contorno 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N ::= entero coma entero 
            {
              int[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    int x1 = Integer.parseInt(x);
    int y1 = Integer.parseInt(y);
    RESULT = new int[] {x1,y1};

              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("N",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N ::= N coma entero coma entero 
            {
              int[] RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).right;
		int[] lista2 = (int[])((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$AnalisisSintactico$stack.peek()).value;
		
    int xi = Integer.parseInt(x);
    int yi = Integer.parseInt(y);
    int[] temp = new int[lista2.length + 2];
    System.arraycopy(lista2, 0, temp, 0, lista2.length);
    temp[lista2.length] = xi;
    temp[lista2.length + 1] = yi;
    RESULT = temp;
    
              CUP$AnalisisSintactico$result = parser.getSymbolFactory().newSymbol("N",5, ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.elementAt(CUP$AnalisisSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisisSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalisisSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisisSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisisSintactico$do_action(
    int                        CUP$AnalisisSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalisisSintactico$parser,
    java.util.Stack            CUP$AnalisisSintactico$stack,
    int                        CUP$AnalisisSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalisisSintactico$do_action_part00000000(
                               CUP$AnalisisSintactico$act_num,
                               CUP$AnalisisSintactico$parser,
                               CUP$AnalisisSintactico$stack,
                               CUP$AnalisisSintactico$top);
    }
}

}
